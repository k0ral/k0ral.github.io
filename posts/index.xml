<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on My digital garden</title><link>https://k0ral.github.io/posts/</link><description>Recent content in Posts on My digital garden</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://k0ral.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Cookies üç™</title><link>https://k0ral.github.io/posts/cookies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://k0ral.github.io/posts/cookies/</guid><description>Ingr√©dients pour 1 fourn√©e de ~12 cookies 1 ≈ìuf 85g sucre de Cannes 85g beurre sal√© 150g farine 100g p√©pites de chocolat 1 sachet de sucre vanill√© 1 cuiller √† caf√© de levure chimique Proc√©dure Ramollir le beurre Mettre tous les ingr√©dients dans un bol Malaxer avec les mains jusqu‚Äô√† ce que le m√©lange forme une p√¢te homog√®ne Disposer la p√¢te par petites boules (~5cm de diam√®tre), sur un plat √† four avec papier sulfuris√© Mettre au four pendant 10 minutes √† 180¬∞C</description><content type="html"><![CDATA[<h2 id="ingr√©dients-pour-1-fourn√©e-de-12-cookies">Ingr√©dients pour 1 fourn√©e de ~12 cookies</h2>
<ul>
<li>1 ≈ìuf</li>
<li>85g sucre de Cannes</li>
<li>85g beurre sal√©</li>
<li>150g farine</li>
<li>100g p√©pites de chocolat</li>
<li>1 sachet de sucre vanill√©</li>
<li>1 cuiller √† caf√© de levure chimique</li>
</ul>
<h2 id="proc√©dure">Proc√©dure</h2>
<ul>
<li>Ramollir le beurre</li>
<li>Mettre tous les ingr√©dients dans un bol</li>
<li>Malaxer avec les mains jusqu‚Äô√† ce que le m√©lange forme une p√¢te homog√®ne</li>
<li>Disposer la p√¢te par petites boules (~5cm de diam√®tre), sur un plat √† four avec papier sulfuris√©</li>
<li>Mettre au four pendant 10 minutes √† 180¬∞C</li>
</ul>
]]></content></item><item><title>Install LineageOS on Xiaomi Pocophone F1</title><link>https://k0ral.github.io/posts/install-lineageos-on-xiaomi-pocophone-f1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://k0ral.github.io/posts/install-lineageos-on-xiaomi-pocophone-f1/</guid><description>Go to Lineage OS wiki for beryllium, read everything once first, then follow instructions with the following changes:
In section &amp;ldquo;Unlocking the bootloader&amp;rdquo; after enabling developer options, go to Settings &amp;gt; Additional Settings &amp;gt; Developer Options and enable USB Debugging and OEM Unlocking In section &amp;ldquo;Installing LineageOS from recovery&amp;rdquo; before doing anything, download latest firmware (for Android 10) from Xiaomi Firmware Updater before sideloading the LineageOS package, sideload the Xiaomi firmware update</description><content type="html"><![CDATA[<p>Go to <a href="https://wiki.lineageos.org/devices/beryllium/install">Lineage OS wiki for beryllium</a>, <strong>read everything once</strong> first, then follow instructions with the following changes:</p>
<ul>
<li>In section &ldquo;Unlocking the bootloader&rdquo;
<ul>
<li>after enabling developer options, go to <code>Settings &gt; Additional Settings &gt; Developer Options</code> and enable <code>USB Debugging</code> and <code>OEM Unlocking</code></li>
</ul>
</li>
<li>In section &ldquo;Installing LineageOS from recovery&rdquo;
<ul>
<li>before doing anything, download latest firmware (for Android 10) from <a href="https://xiaomifirmwareupdater.com/firmware/beryllium/">Xiaomi Firmware Updater</a></li>
<li>before sideloading the LineageOS package, sideload the Xiaomi firmware update</li>
</ul>
</li>
</ul>
]]></content></item><item><title>Preferred-versions smooth out breaking changes</title><link>https://k0ral.github.io/posts/preferred-versions-smooth-out-breaking-changes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://k0ral.github.io/posts/preferred-versions-smooth-out-breaking-changes/</guid><description>Preferred-versions are a Hackage feature that looks mostly unused, whereas it enables a software release strategy that can mitigate the damage caused by API-breaking changes. This article is an attempt to advertise this strategy.
Note: the idea is applicable to any software ecosystem, provided the concept of preferred-versions is implemented by the installer.
API-breaking changes cause conflicts between:
users who need the changes as soon as possible; users who don‚Äôt care about the changes and perceive them as a migration cost only.</description><content type="html"><![CDATA[<p>Preferred-versions are a <a href="https://hackage.haskell.org/">Hackage</a> feature that looks <a href="https://hackage.haskell.org/packages/preferred">mostly unused</a>, whereas it enables a software release strategy that can mitigate the damage caused by API-breaking changes. This article is an attempt to advertise this strategy.</p>
<p>Note: the idea is applicable to any software ecosystem, provided the concept of preferred-versions is implemented by the installer.</p>
<p>API-breaking changes cause conflicts between:</p>
<ul>
<li>users who need the changes as soon as possible;</li>
<li>users who don‚Äôt care about the changes and perceive them as a migration cost only.</li>
</ul>
<p>According to the hackage documentation:</p>
<blockquote>
<p>If a range of versions is preferred, it means that the installer won‚Äôt install a non-preferred package version unless it is explicitly specified or if it‚Äôs the only choice the installer has</p>
</blockquote>
<p>We can leverage this feature to create a transition period during which a new version is available only if explicitly requested in the <code>.cabal</code> file. As a consequence, early-adopters can enjoy the new API while other users aren‚Äôt impacted in their daily workflow. In other words: the new API is opt-in.</p>
<p>To be accurate, here is an example procedure:</p>
<ul>
<li>let <code>A.B.C.D</code> be the latest published version (assuming you are following the <a href="https://pvp.haskell.org/">Haskell PVP</a>)</li>
<li>release a new version <code>A.B.C.(D+1)</code> that only includes additional deprecation markers to warn users about the upcoming breaking change;</li>
<li>release a new version <code>A.(B+1).0.0</code> that includes the breaking changes</li>
<li>on Hackage, set the ‚ÄúPreferred versions‚Äù such that <code>A.B.C.(D+1)</code> is preferred over <code>A.(B+1).0.0</code></li>
<li>after a reasonable time, remove the preferred version so that <code>A.(B+1).0.0</code> becomes the new default</li>
</ul>
<p>As is often the case, one size does not fit all: this strategy may not be appropriate to your project, but it is worth considering.</p>
]]></content></item><item><title>Printable, comprehensive action cards for Pathfinder 2e</title><link>https://k0ral.github.io/posts/printable-comprehensive-action-cards-pathfinder-2e/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://k0ral.github.io/posts/printable-comprehensive-action-cards-pathfinder-2e/</guid><description>To whom it may serve, here is a set of printable, comprehensive action cards I&amp;rsquo;ve just designed for Pathfinder 2e. Nothing fancy, it&amp;rsquo;s mostly formatted-text, but still.
Coverage The set includes the following elements from the Core Rulebook:
basic actions (that any character can perform most of the time) specialty basic actions (useful under specific circumstances), except for Activate an Item skill-related actions exploration and downtime activities Actions from Gamemastery Guide and Advanced Player&amp;rsquo;s Guide are not included (for now.</description><content type="html"><![CDATA[<p>To whom it may serve, <a href="/pathfinder2e-action-cards.pdf">here</a> is a set of printable, comprehensive action cards I&rsquo;ve just designed for Pathfinder 2e. Nothing fancy, it&rsquo;s mostly formatted-text, but still.</p>
<h2 id="coverage">Coverage</h2>
<p>The set includes the following elements from the <em>Core Rulebook</em>:</p>
<ul>
<li>basic actions (that any character can perform most of the time)</li>
<li>specialty basic actions (useful under specific circumstances), except for <em>Activate an Item</em></li>
<li>skill-related actions</li>
<li>exploration and downtime activities</li>
</ul>
<p>Actions from <em>Gamemastery Guide</em> and <em>Advanced Player&rsquo;s Guide</em> are not included (for now.)</p>
<h2 id="rationale">Rationale</h2>
<p>My motivation is to selectively distribute such cards to willing players, according to the capabilities of their characters, so that:</p>
<ul>
<li>players are aware of the range of standard actions offered by the ruleset</li>
<li>the effort to check most of the action rules is lowered from &ldquo;browse the rulebook/Archives of Nethys&rdquo; to &ldquo;find and read the relevant card you already have in hand&rdquo;</li>
<li>players are empowered to contribute to the collective effort of obeying the spirit of the rules</li>
</ul>
<h2 id="how-this-was-made">How this was made</h2>
<p>I made the following design decisions:</p>
<ul>
<li>to allow for more content per card, I picked the Tarot format (70mm x 121mm = 2.75‚Ä≥ x 4.75‚Ä≥), which is bigger than the more traditional Poker format (63mm x 88mm = 2.5‚Ä≥ x 3.5‚Ä≥) while remaining convenient to Manipulate</li>
<li>I had to reword, sometimes even truncate, some rules, to fit in the card format; when significant details were cut, I added a &ldquo;See rulebook&rdquo; mention</li>
<li>as another trick to compress the information, I &ldquo;invented&rdquo; the <em>Trained</em> trait for actions that require the character to be Trained in a specific skill</li>
<li>actions that have short descriptions and are closely-related to each other, are grouped in a single card</li>
<li><em>Activate an Item</em> is excluded because I couldn&rsquo;t find a concise way of describing it, other than just &ldquo;check the item description&rdquo;, which defeats the purpose of making a card</li>
<li>after trying many tools (namely <em>Inkscape</em>, <em>Karbon</em>, <em>Scribus</em>, <em>Python</em> &amp; <em>Cairo</em>, <em>TeX</em>, <em>AbiWord</em>), to my own surprise I settled with <em>LibreOffice Writer</em> to design the cards, because experiments showed that it has the best &ldquo;good-looking / time-consuming&rdquo; ratio, notably because I am Untrained in graphics and also I realized a word-processor makes sense when most of the work involved is text-formatting</li>
<li>my workflow to go from the ODT file to actual cards is:
<ul>
<li>export to PDF from <em>LibreOffice Writer</em> (built-in feature)</li>
<li>convert PDF to 1 image file per page using <em>ImageMagick</em> (you must be <em>Trained</em> in commandline): <code>convert -density 300 -trim cards.pdf -quality 100 card-%03d.jpg</code></li>
<li>upload image files to an online card printer</li>
</ul>
</li>
</ul>
]]></content></item></channel></rss>