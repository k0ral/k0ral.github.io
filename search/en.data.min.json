[{"id":0,"href":"/notes/build-a-gaming-pc/","title":"Build a gaming PC","parent":"Notes","content":"Curated resources      Logical Increments PC Part Picker  "},{"id":1,"href":"/categories/","title":"Categories","parent":"My digital garden","content":""},{"id":2,"href":"/notes/cookies/","title":"Cookies üç™","parent":"Notes","content":"Ingr√©dients pour 1 fourn√©e de ~12 cookies      1 ≈ìuf 85g sucre de Cannes 85g beurre sal√© 150g farine 100g p√©pites de chocolat 1 sachet de sucre vanill√© 1 cuiller √† caf√© de levure chimique  Proc√©dure      Ramollir le beurre Mettre tous les ingr√©dients dans un bol Malaxer avec les mains jusqu‚Äô√† ce que le m√©lange forme une p√¢te homog√®ne Disposer la p√¢te par petites boules (~5cm de diam√®tre), sur un plat √† four avec papier sulfuris√© Mettre au four pendant 10 minutes √† 180¬∞C  "},{"id":3,"href":"/tags/cooking/","title":"cooking","parent":"Tags","content":""},{"id":4,"href":"/tags/how-to/","title":"how-to","parent":"Tags","content":""},{"id":5,"href":"/notes/install-lineageos-on-xiaomi-pocophone-f1/","title":"Install LineageOS on Xiaomi Pocophone F1","parent":"Notes","content":"Go to Lineage OS wiki for beryllium, read everything once first, then follow instructions with the following changes:\n In section \u0026ldquo;Unlocking the bootloader\u0026rdquo;  after enabling developer options, go to Settings \u0026gt; Additional Settings \u0026gt; Developer Options and enable USB Debugging and OEM Unlocking   In section \u0026ldquo;Installing LineageOS from recovery\u0026rdquo;  before doing anything, download latest firmware (for Android 10) from Xiaomi Firmware Updater before sideloading the LineageOS package, sideload the Xiaomi firmware update    "},{"id":6,"href":"/","title":"My digital garden","parent":"","content":""},{"id":7,"href":"/notes/","title":"Notes","parent":"My digital garden","content":""},{"id":8,"href":"/tags/original-content/","title":"original-content","parent":"Tags","content":""},{"id":9,"href":"/tags/pathfinder/","title":"pathfinder","parent":"Tags","content":""},{"id":10,"href":"/notes/preferred-versions-smooth-out-breaking-changes/","title":"Preferred-versions smooth out breaking changes","parent":"Notes","content":"Preferred-versions are a Hackage feature that looks mostly unused, whereas it enables a software release strategy that can mitigate the damage caused by API-breaking changes. This article is an attempt to advertise this strategy.\nNote: the idea is applicable to any software ecosystem, provided the concept of preferred-versions is implemented by the installer.\nAPI-breaking changes cause conflicts between:\n users who need the changes as soon as possible; users who don‚Äôt care about the changes and perceive them as a migration cost only.  According to the hackage documentation:\n If a range of versions is preferred, it means that the installer won‚Äôt install a non-preferred package version unless it is explicitly specified or if it‚Äôs the only choice the installer has\n We can leverage this feature to create a transition period during which a new version is available only if explicitly requested in the .cabal file. As a consequence, early-adopters can enjoy the new API while other users aren‚Äôt impacted in their daily workflow. In other words: the new API is opt-in.\nTo be accurate, here is an example procedure:\n let A.B.C.D be the latest published version (assuming you are following the Haskell PVP) release a new version A.B.C.(D+1) that only includes additional deprecation markers to warn users about the upcoming breaking change; release a new version A.(B+1).0.0 that includes the breaking changes on Hackage, set the ‚ÄúPreferred versions‚Äù such that A.B.C.(D+1) is preferred over A.(B+1).0.0 after a reasonable time, remove the preferred version so that A.(B+1).0.0 becomes the new default  As is often the case, one size does not fit all: this strategy may not be appropriate to your project, but it is worth considering.\n"},{"id":11,"href":"/notes/printable-comprehensive-action-cards-pathfinder-2e/","title":"Printable, comprehensive action cards for Pathfinder 2e","parent":"Notes","content":"To whom it may serve, here is a set of printable, comprehensive action cards I\u0026rsquo;ve just designed for Pathfinder 2e. Nothing fancy, it\u0026rsquo;s mostly formatted-text, but still.\nCoverage     The set includes the following elements from the Core Rulebook:\n basic actions (that any character can perform most of the time) specialty basic actions (useful under specific circumstances), except for Activate an Item skill-related actions exploration and downtime activities  Actions from Gamemastery Guide and Advanced Player\u0026rsquo;s Guide are not included (for now.)\nRationale     My motivation is to selectively distribute such cards to willing players, according to the capabilities of their characters, so that:\n players are aware of the range of standard actions offered by the ruleset the effort to check most of the action rules is lowered from \u0026ldquo;browse the rulebook/Archives of Nethys\u0026rdquo; to \u0026ldquo;find and read the relevant card you already have in hand\u0026rdquo; players are empowered to contribute to the collective effort of obeying the spirit of the rules  How this was made     I made the following design decisions:\n to allow for more content per card, I picked the Tarot format (70mm x 121mm = 2.75‚Ä≥ x 4.75‚Ä≥), which is bigger than the more traditional Poker format (63mm x 88mm = 2.5‚Ä≥ x 3.5‚Ä≥) while remaining convenient to Manipulate I had to reword, sometimes even truncate, some rules, to fit in the card format; when significant details were cut, I added a \u0026ldquo;See rulebook\u0026rdquo; mention as another trick to compress the information, I \u0026ldquo;invented\u0026rdquo; the Trained trait for actions that require the character to be Trained in a specific skill actions that have short descriptions and are closely-related to each other, are grouped in a single card Activate an Item is excluded because I couldn\u0026rsquo;t find a concise way of describing it, other than just \u0026ldquo;check the item description\u0026rdquo;, which defeats the purpose of making a card after trying many tools (namely Inkscape, Karbon, Scribus, Python \u0026amp; Cairo, TeX, AbiWord), to my own surprise I settled with LibreOffice Writer to design the cards, because experiments showed that it has the best \u0026ldquo;good-looking / time-consuming\u0026rdquo; ratio, notably because I am Untrained in graphics and also I realized a word-processor makes sense when most of the work involved is text-formatting my workflow to go from the ODT file to actual cards is:  export to PDF from LibreOffice Writer (built-in feature) convert PDF to 1 image file per page using ImageMagick (you must be Trained in commandline): convert -density 300 -trim cards.pdf -quality 100 card-%03d.jpg upload image files to an online card printer    "},{"id":12,"href":"/tags/software-craftsmanship/","title":"software-craftsmanship","parent":"Tags","content":""},{"id":13,"href":"/tags/","title":"Tags","parent":"My digital garden","content":""},{"id":14,"href":"/tags/video-gaming/","title":"video-gaming","parent":"Tags","content":""}]